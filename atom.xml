<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[What are we all looking for?]]></title>
  <link href="http://rohilsurana.github.io/atom.xml" rel="self"/>
  <link href="http://rohilsurana.github.io/"/>
  <updated>2017-07-12T00:07:46+05:30</updated>
  <id>http://rohilsurana.github.io/</id>
  <author>
    <name><![CDATA[Rohil Surana]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Code vs English]]></title>
    <link href="http://rohilsurana.github.io/blog/2017/07/11/english-vs-code/"/>
    <updated>2017-07-11T20:50:36+05:30</updated>
    <id>http://rohilsurana.github.io/blog/2017/07/11/english-vs-code</id>
    <content type="html"><![CDATA[<center><img class="center" src="http://rohilsurana.github.io/images/eng_vs_code.jpg"></center>


<p><br></p>

<p>Since a past few days, I have been attending a bootcamp at my workplace. Here we are learning about expressing intent in what we do, be it writing code or commit messages. That&rsquo;s what I want to compare here. I have been writing code for quite a few years now, that wasn&rsquo;t the kind I am writing here, but it still worked. Although I have been using English as my secondary language all my life, but still I struggle more while writing commit messages than while writing code.</p>

<p>Most programming languages have a few ways to get something done. While english has a lot of ways to express something that might seem similar but can depend on the context too. Even though while coding we use english a lot, when naming variables, functions etc. but writing these to express intent is way easier because of the grammar involved, since most programming languages have a definite or better way to perform simple actions and for complex actions there are conventions in place that are easy to follow if you are aware of them. So there are very few things left to assume in programming languages. The logic of the code written also helps in understanding what the code wants to express. While in english there are a lot of multiple ways that communicate the same thought and the grammar allows us to change the structure of a sentence in various ways, for example using active and passive voice.</p>

<p>What I found works for me is to use the identifiers in the code to work as a framework for writing the commit message. Add a few prepositions or verb and voil√†! you have a commit message that expresses intent.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started With VIM]]></title>
    <link href="http://rohilsurana.github.io/blog/2017/07/07/getting-started-with-vim/"/>
    <updated>2017-07-07T02:44:24+05:30</updated>
    <id>http://rohilsurana.github.io/blog/2017/07/07/getting-started-with-vim</id>
    <content type="html"><![CDATA[<p>I don&rsquo;t think anyone who is reading this doesn&rsquo;t know about VIM. Everyone, one in their life has been forced to exit it. I have tried learning VIM a number of times but failed. I fumbled with it and pressed random keys to just get out of it. Most of times it has been because of my inability to select large blocks of text using mouse and deleting it, which I have been used to when using Atom and Sublime Text or some IDE. Using VIM requires you to be already comfortable with writing commands, i.e. you should be good at using command line. When you get comfortable with the keyboard only then can you master VIM. And that is one of the advantages of VIM, it forces you to minimize the use of mouse. Now not using mouse does 2 things, lets your hand sit on the keyboard and save the time for shifting to the mouse from the keyboard.</p>

<h4>Why VIM?</h4>

<p>VIM is available by default on most of the OS distributions. Also as one of my friend suggests you can use it to edit files on a remote hosts too. But that is not all. VIM&rsquo;s plugins are what makes it so great, just like any of the new editors out there VIM also has plugins support (20+ years old, meh!). Being old and a prefered choice of power users the number of plugins it has are around double that of Atom.</p>

<p>It has different modes, a few of which are Normal mode, Visual Mode, Insert Mode, Command Mode etc.. These can be invoked using different keys in the Normal mode that is given at start of VIM. These modes provide different kinds of functions. Command mode, as the name suggests, can be used to execute commands that can run on the current file. You can also add custom commands by yourself or by adding plugins. For example using a <code>:py</code> command to execute python code from VIM.</p>

<p>To make up for the mouse it has motions, in the normal mode you can use <code>h</code>, <code>j</code>, <code>k</code>, <code>l</code> to move the cursor left, down, up, right respectively. Prefix it with a number like <code>9k</code> can cause that counts of motion in the respective direction. There are many such motions like <code>H</code>, <code>G</code> etc. that are used to jump to top or bottom of the page. In Visual mode using these motions causes the text to get selected. Hence you can use complex combinations of these motions to select desired text and copy or replace it.</p>

<p>There are also similar text objects that are independent of the cursor position inside the scope. These work on the complete word, sentence, paragraph despite their position inside it. Ex - <code>diw</code> would delete a word while <code>dw</code> will delete only the part of the word after the prompt.
Similarly exists <code>daw</code>, <code>dis</code>, <code>das</code>, <code>dip</code>, <code>dap</code> etc..</p>

<p>These text-objects and motions enables a user to move faster and precisely without removing their hands from the keyboard and hence saving time.</p>

<p>I am beginning to use these motions and text to speed up the editing process.</p>
]]></content>
  </entry>
  
</feed>
